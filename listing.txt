  LL1 warning in AddExp: "+" is the start & successor of a deletable structure
  LL1 warning in AddExp: "-" is the start & successor of a deletable structure

   1 using Library;
   2 using System.Collections.Generic;
   3 
   4 COMPILER Calc $NC
   5 //  Scott Burnett && Redy van Dyk
   6 
   7 class Entry {
   8     public string _name;
   9     public int _value;
  10     public Entry (string name, int value) {
  11         _name = name;
  12         _value = value;
  13     }
  14 }
  15 
  16 class Table {
  17     public static List<Entry> variables = new List<Entry>();
  18     public static int indexOf(string name) {
  19         int i = 0;
  20         foreach (Entry v in variables) {
  21             if (name == v._name) return i;
  22             i++;
  23         }
  24         return -1;
  25     }
  26     public static int valueOf(string name) {
  27         int pos = indexOf(name);
  28         if (pos == -1) return 0;
  29         else return variables[pos]._value;
  30     }
  31     public static void set (string name, int value) {
  32         int pos = indexOf(name);
  33         if (pos == -1)
  34             variables.Add(new Entry(name, value));
  35         else
  36             variables[pos]._value = value;
  37     }
  38 }
  39 
  40 static int ToInt(bool b) {
  41 // return 0 or 1 according as b is false or true
  42   return b ? 1 : 0;
  43 } // ToInt
  44 
  45 static bool ToBool(int i) {
  46 // return false or true according as i is 0 or 1
  47   return i == 0 ? false : true;
  48 } // ToBool
  49 
  50 static Table table = new Table();
  51 
  52 CHARACTERS
  53   digit      = "0123456789" .
  54   letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  55 
  56 TOKENS
  57   number     = digit { digit } .
  58   identifier = letter { letter | digit } .
  59 
  60 IGNORE CHR(0) .. CHR(31)
  61 
  62 PRODUCTIONS
  63   Calc
  64   =
  65   { Print
  66   | Assignment 
  67   } "quit"
  68   .
  69 
  70   Assignment
  71   =
  72   (. int value, initValue; .)
  73   (. string name = token.val; .)
  74   Variable < out initValue >
  75   "="
  76   Expression < out value >
  77   (. Table.set(name, value); .)
  78   SYNC ";"
  79   .
  80 
  81   Print
  82   =
  83   "print"
  84   (. int value; .)
  85   Expression < out value >
  86   (. Console.WriteLine(value); .)
  87   { WEAK ","
  88     Expression < out value >
  89     (. Console.WriteLine(value); .)
  90   }
  91   SYNC ";"
  92   .
  93 
  94   Expression < out int value >
  95   =
  96   AndExp < out value >
  97   { (. int andValue; .)
  98     "||"
  99     AndExp < out andValue > (. value = ((value != 0) || (andValue != 0)) ? 1 : 0; .)
 100   } .
 101 
 102   AndExp < out int value>
 103   =
 104   EqlExp < out value >
 105   { (. int eqlValue; .)
 106     "&&"
 107     EqlExp < out eqlValue > (. value = ((value != 0) && (eqlValue != 0)) ? 1 : 0; .)
 108   } .
 109 
 110   EqlExp < out int value >
 111   =
 112   RelExp < out value >
 113   { (. int relValue; .)
 114     (. string eqlOpKind; .)
 115     EqlOp < out eqlOpKind >
 116     (. switch(eqlOpKind) { .)
 117     (. case "==": .)
 118         RelExp < out relValue > (. value = (value == relValue) ? 1 : 0; break; .)
 119     (. case "!=": .)
 120         RelExp < out relValue > (. value = (value != relValue) ? 1 : 0; break; .)
 121     (. } .)
 122   } .
 123 
 124   RelExp <out int value >
 125   =
 126   AddExp < out value >
 127   [ (. int addValue; .)
 128     (. string relOpKind; .)
 129     RelOp < out relOpKind >
 130     (. switch(relOpKind) { .)
 131     (. case "<": .)
 132         AddExp < out addValue > (. value = (value < addValue) ? 1 : 0; break; .)
 133     (. case "<=": .)
 134         AddExp < out addValue > (. value = (value <= addValue) ? 1 : 0; break; .)
 135     (. case ">": .)
 136         AddExp < out addValue > (. value = (value > addValue) ? 1 : 0; break; .)
 137     (. case ">=": .)
 138         AddExp < out addValue > (. value = (value >= addValue) ? 1 : 0; break; .)
 139     (. } .)
 140   ] .
 141 
 142   AddExp < out int value >
 143   =
 144   MultExp < out value >
 145   { (. int multValue; .)
 146     (. string addOpKind; .)
 147     AddOp < out addOpKind >
 148     (. switch(addOpKind) { .)
 149     (. case "+": .)
 150         MultExp < out multValue > (. value += multValue; break;.)
 151     (. case "-": .)
 152         MultExp < out multValue > (. value -= multValue; break; .)
 153     (. } .)
 154   } .
 155 
 156   MultExp < out int value >
 157   =
 158   UnaryExp < out value >
 159   { (. int unaryValue; .)
 160     (. string mulOpKind; .)
 161     MulOp < out mulOpKind >
 162     (. switch(mulOpKind) { .)
 163     (. case "*": .)
 164         UnaryExp < out unaryValue > (. value *= unaryValue; break; .)
 165     (. case "/": .)
 166         UnaryExp < out unaryValue > (. if (unaryValue != 0) { value /= unaryValue; break; } .)
 167                                     (. else { SemErr("Attempted to divide by zero"); value = 0; break; } .)
 168     (. case "%": .)
 169         UnaryExp < out unaryValue > (. if (unaryValue != 0) { value %= unaryValue; break; } .)
 170                                     (. else { SemErr("Attempted to divide by zero"); value = 0; break; } .)
 171     (. } .)
 172   } .
 173 
 174   UnaryExp < out int value >
 175   (. value = 0; .)
 176   =   Factor < out value >
 177     | "+" UnaryExp < out value > (. value = + value; .)
 178     | "-" UnaryExp < out value > (. value = - value; .)
 179     | "!" UnaryExp < out value > (. value = (value == 0) ? 1 : 0; .)
 180   .
 181 
 182   Factor < out int value >
 183   (. value = 0; .)
 184   =
 185     Variable < out value >
 186     | Number < out value > 
 187     | "true" (. value = 1; .)
 188     | "false" (. value = 0; .)
 189     | "(" Expression < out value >
 190       ")"
 191   .
 192 
 193   Variable < out int value >
 194   =
 195   identifier
 196   (. value = Table.valueOf(token.val); .)
 197   .
 198 
 199   Number < out int value >
 200   =
 201   number
 202   (. value = Convert.ToInt32(token.val); .)
 203   .
 204 
 205   MulOp < out string kind >
 206   (. kind = ""; .)
 207   =
 208       "*" (. kind = "*"; .)
 209     | "/" (. kind = "/"; .)
 210     | "%" (. kind = "%"; .)
 211     .
 212 
 213   AddOp < out string kind >
 214     (. kind = ""; .)
 215   =
 216       "+" (. kind = "+"; .)
 217     | "-" (. kind = "-"; .)
 218   .
 219 
 220   RelOp < out string kind >
 221   (. kind = ""; .)
 222   =
 223       "<" (. kind = "<"; .)
 224     | "<=" (. kind = "<="; .)
 225     | ">" (. kind = ">"; .)
 226     | ">=" (. kind = ">="; .)
 227   .
 228 
 229   EqlOp < out string kind >
 230   (. kind = ""; .)
 231   =
 232       "==" (. kind = "=="; .)
 233     | "!=" (. kind = "!="; .)
 234   .
 235 
 236 END Calc.

0 errors detected
2 warnings detected
