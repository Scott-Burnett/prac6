  LL1 warning in AddExp: "+" is the start & successor of a deletable structure
  LL1 warning in AddExp: "-" is the start & successor of a deletable structure

   1 using Library;
   2 using System.Collections.Generic;
   3 
   4 COMPILER Calc $NC
   5 //  Scott Burnett && Redy van Dyk
   6 
   7 class Entry {
   8     public string _name;
   9     public int _value;
  10     public Entry (string name, int value) {
  11         _name = name;
  12         _value = value;
  13     }
  14 }
  15 
  16 class Table {
  17     public List<Entry> variables = new List<Entry>();
  18     public int indexOf(string name) {
  19         int i = 0;
  20         foreach (Entry v in variables) {
  21             if (name == v._name) return i;
  22             i++;
  23         }
  24         return -1;
  25     }
  26     public int valueOf(string name) {
  27         int pos = indexOf(name);
  28         if (pos == -1) return 0;
  29         else return variables[pos]._value;
  30     }
  31     public void set (string name, int value) {
  32         int pos = indexOf(name);
  33         if (pos == -1)
  34             variables.Add(new Entry(name, value));
  35         else
  36             variables[pos]._value = value;
  37     }
  38 }
  39 
  40 static int ToInt(bool b) {
  41 // return 0 or 1 according as b is false or true
  42   return b ? 1 : 0;
  43 } // ToInt
  44 
  45 static bool ToBool(int i) {
  46 // return false or true according as i is 0 or 1
  47   return i == 0 ? false : true;
  48 } // ToBool
  49 
  50 static Table table = new Table();
  51 
  52 CHARACTERS
  53   digit      = "0123456789" .
  54   letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  55 
  56 TOKENS
  57   number     = digit { digit } .
  58   identifier = letter { letter | digit } .
  59 
  60 IGNORE CHR(0) .. CHR(31)
  61 
  62 PRODUCTIONS
  63   Calc
  64   =
  65   { Print
  66   | Assignment 
  67   } "quit"
  68   .
  69 
  70   Assignment
  71   =
  72   (. int value; .)
  73   (. string name = token.val; .)
  74   Variable < value >
  75   "="
  76   Expression < value >
  77   (. Table.set(name, value); .)
  78   SYNC ";"
  79   .
  80 
  81   Print
  82   =
  83   "print"
  84   (. int value; .)
  85   Expression < value >
  86   { WEAK ","
  87     Expression < Expralue >
  88   }
  89   SYNC ";"
  90   .
  91 
  92   Expression < out int value >
  93   =
  94   AndExp < value >
  95   { (. int andValue; .)
  96     "||"
  97     AndExp < andValue > (. value = ((value != 0) || (andValue != 0)); .)
  98   } .
  99 
 100   AndExp < out int value>
 101   =
 102   EqlExp < value >
 103   { (. int eqlValue; .)
 104     "&&"
 105     EqlExp < eqlValue > (. value = ((value != 0) && (eqlValue != 0)) ? 1 : 0; .)
 106   } .
 107 
 108   EqlExp < out int value >
 109   =
 110   RelExp < value >
 111   { (. int relValue; .)
 112     (. string eqlOpKind; .)
 113     EqlOp < eqlOpKind >
 114     (. switch(relOpKind) { .)
 115     (. case "==": .)
 116         RelExp < addValue > (. value = (value == addValue) ? 1 : 0; .)
 117     (. case "==": .)
 118         RelExp < addValue > (. value = (value != addValue) ? 1 : 0; .)
 119     (. } .)
 120   } .
 121 
 122   RelExp <out int value >
 123   =
 124   AddExp < value >
 125   [ (. int addValue; .)
 126     (. string relOpKind; .)
 127     RelOp < relOpKind >
 128     (. switch(relOpKind) { .)
 129     (. case "<": .)
 130         AddExp < addValue > (. value = (value < addValue) ? 1 : 0; .)
 131     (. case "<=": .)
 132         AddExp < addValue > (. value = (value <= addValue) ? 1 : 0; .)
 133     (. case ">": .)
 134         AddExp < addValue > (. value = (value > addValue) ? 1 : 0; .)
 135     (. case ">=": .)
 136         AddExp < addValue > (. value = (value >= addValue) ? 1 : 0; .)
 137     (. } .)
 138   ] .
 139 
 140   AddExp < out int value >
 141   =
 142   MultExp < value >
 143   { (. int multValue; .)
 144     (. string addOpKind; .)
 145     AddOp < addOpKind >
 146     (. switch(addOpKind) { .)
 147     (. case "+": .)
 148         MultExp < multValue > (. value += multValue; .)
 149     (. case "-": .)
 150         MultExp < multValue > (. value -= multValue; .)
 151     (. } .)
 152   } .
 153 
 154   MultExp < out int value >
 155   =
 156   UnaryExp < value >
 157   { (. int unaryValue; .)
 158     (. string mulOpKind; .)
 159     MulOp < mulOpKind >
 160     (. switch(mulOpKind) { .)
 161     (. case "*": .)
 162         UnaryExp < unaryValue > (. value *= unaryValue; .)
 163     (. case "/": .)
 164         UnaryExp < unaryValue > (. value /= unaryValue; .)
 165     (. case "%": .)
 166         UnaryExp < unaryValue > (. value %= unaryValue; .)
 167     (. } .)
 168   } .
 169 
 170   UnaryExp < out int value >
 171   =   Factor < value >
 172     | "+" UnaryExp < + value >
 173     | "-" UnaryExp < - value >
 174     | "!" UnaryExp < ! value >
 175   .
 176 
 177   Factor < out int value >
 178   =
 179     Variable < value >
 180     | Number < value > 
 181     | "true" (. value = 1; .)
 182     | "false" (. value = 0; .)
 183     | "(" Expression < value >
 184       ")"
 185   .
 186 
 187   Variable < out int value >
 188   =
 189   (. value = Table.valueOf(token.val); .)
 190   identifier
 191   .
 192 
 193   Number < out int value >
 194   =
 195   (. value = token.val; .)
 196   number
 197   .
 198 
 199   MulOp < out string kind >
 200   =
 201       "*" (. kind = "*"; .)
 202     | "/" (. kind = "/"; .)
 203     | "%" (. kind = "%"; .)
 204     .
 205 
 206   AddOp < out string kind >
 207   =
 208       "+" (. kind = "+"; .)
 209     | "-" (. kind = "-"; .)
 210   .
 211 
 212   RelOp < out string kind >
 213   =
 214       "<" (. kind = "<"; .)
 215     | "<=" (. kind = "<="; .)
 216     | ">" (. kind = ">"; .)
 217     | ">=" (. kind = ">="; .)
 218   .
 219 
 220   EqlOp < out string kind >
 221   =
 222       "==" (. kind = "=="; .)
 223     | "!=" (. kind = "!="; .)
 224   .
 225 
 226 END Calc.

0 errors detected
2 warnings detected
