COMPILER Parva $CN
/* Parva level 1 grammar  - Coco/R for C# (EBNF)
   P.D. Terry, Rhodes University, 2016
   Extended Grammar similar to that done in Prac 3  */

    static Table table = new Table();
   
CHARACTERS
  lf         = CHR(10) .
  backslash  = CHR(92) .
  control    = CHR(0) .. CHR(31) .
  letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  digit      = "0123456789" .
  stringCh   = ANY - '"' - control - backslash .
  charCh     = ANY - "'" - control - backslash .
  printable  = ANY - control .

TOKENS

/* Insisting that identifiers cannot end with an underscore is quite easy */

  identifier = letter { letter | digit | "_" { "_" } ( letter | digit ) } .

/* but a simpler version is what many people think of

  identifier = letter { letter | digit | "_" ( letter | digit ) } .

   Technically this is not quite what was asked.  The restriction is really that an
   identifier cannot end with an underscore.  Identifiers like Pat_____Terry are allowed: */

  number     = digit { digit } .
  stringLit  = '"' { stringCh | backslash printable } '"' .
  charLit    = "'" ( charCh   | backslash printable ) "'" .

COMMENTS FROM "//" TO lf
COMMENTS FROM "/*" TO "*/"
IGNORE CHR(9) .. CHR(13)

PRODUCTIONS
  Parva             = "void"
                    Ident
                    (. Table.declare(token.val, funcKind, noType, token.line); .)
                    "(" ")"
                    Block
                    (. Table.PrintTable(); .) .
  Block             = "{"
                    { Statement }
                    "}" .

/* The options in Statement are easily extended to handle the new forms */

  Statement         =    Block
                       | ConstDeclarations | VarDeclarations
                       | Assignments 
                       | IfStatement       | WhileStatement
                       | ReturnStatement   | HaltStatement
                       | ReadStatement     | WriteStatement
                       | ForStatement      | BreakStatement
                       | ContinueStatement | DoWhileStatement
                       | ";" .

/* Declarations remain the same as before */

  ConstDeclarations = "const" OneConst { "," OneConst } ";" .
  OneConst          = Ident
                    (. string name = token.val; .)
                    (. int kind = constKind, type = noType, value = 0, lineRef = token.line; .)
                    "="
                    Constant < out value, out type >
                    (. Table.declare(name, kind, type, value); .)
                    .
					
  Constant < out int value, out int type >
                    =
                    number (. value = Convert.ToInt32(token.val); type = intType; .)
                    | charLit (. value = (int)token.val[1]; type = charType; .)
                    | "true" (. value = 1; type = boolType; .)
                    | "false" (. value = 0; type = boolType; .)
                    | "null" (. value = 0; type = noType; .)
                    .
					
  VarDeclarations   =
                    (. int type = 0; .)  
                    Type < out type >
                    OneVar < type > { "," OneVar < type > } ";" .

/* We can introduce the extra form of asssignment operators as tokens as follows.  Note
   theta we do not want to use, say "+" "=" because they cannot contain spaces. */

  CompoundAssignOp < out string op >
					= 
					"+=" (. op = "+="; .)
					| "-=" (. op = "-="; .) 
					| "*=" (. op = "*="; .)
					| "/=" (. op = "/="; .)
					| "%=" (. op = "%="; .)
					| "&=" (. op = "&="; .)
					| "|=" (. op = "|="; .)
					.

/* Don't be tempted to use the CompoundAssignOp in the declaration of OneVar or OneConst.
   It cannot have a proper semantic meaning if you do.  All you can use is "=" */

  OneVar < int type > 
                    =
                    Ident
                    (. string name = token.val; .)
                    (. int kind = varKind, int value = 0, lineRef = token.line, exprType = noType; .)
  					[ "=" Expression < out value, out exprType > ] 
                    (. if (exprType != type) Console.WriteLine("error : type mismatch between declaration and expression"); .)
					(. else Table.declare(name, kind, type, value); .)
                    .

/* One way of introducing the extended form of assignment statements might be to define

  Assignments = Designator < out name, out type, out offSet > 
                { "," Designator } ( "=" | CompoundAssignOp )
                Expression { "," Expression } .

*/

/* However, we might wish to limit the form with multiple Designators and Expressions to
   use only the simple = operator, for ease of code generation as we may see later.

   If this is the case, to keep thing LL(1) compliant, the extra forms of assignment
   statement familiar from Python, and the compound assignments familiar from C and C# are
   best handled as below.  THis affords a nice example of factoring a grammar to avoid
   LL(1) conflicts by delaying the awkward component for a while */

  Assignments       = (. string name = ""; int type = noType, offSet = 0; .)
                    Designator < out name, out type, out offSet >
                      ( (. string op = ""; int exprType = noType, exprValue = 0 value = Table.valueOf(name); .)
					    CompoundAssignOp < out op > 
						Expression < out exprValue, out exprTpye >
						(. switch(op) { .)
						(.     case "+=" : .)
						(.         if ( type == exprType ) value += exprValue; .)
                        (.         else Console.WriteLine("Error: type mismatch"); .)				
						(.     case "-=" : .)
						(.         if ( type == exprType ) value -= exprValue; .)
                        (.         else Console.WriteLine("Error: type mismatch"); .)
						(.     case "*=" : .)
						(.         if ( type == exprType ) value *= exprValue; .)
                        (.         else Console.WriteLine("Error: type mismatch"); .)
						(.     case "/=" : .)
						(.         if ( type == exprType ) .)
						(.             if (exprValue == 0) Console.WriteLine("Error: Attempted to divide by zero"); .)
                        (.			   else value /= exprValue; .)
                        (.         else Console.WriteLine("Error: type mismatch"); .)
						(.     case "%=" : .)
						(.         if ( type == exprType ) .)
						(.             if (exprValue == 0) Console.WriteLine("Error: Attempted to divide by zero"); .)
                        (.			   else value /= exprValue; .)
                        (.         else Console.WriteLine("Error: type mismatch"); .)
						(.     case "&=" : .)
						(.         if ( type == exprType ) value &= exprValue; .)
                        (.         else Console.WriteLine("Error: type mismatch"); .)
						(.     case "|=" : .)
						(.         if ( type == exprType ) value |= exprValue; .)
                        (.         else Console.WriteLine("Error: type mismatch"); .)
						(. } .)
						(. Table.setValue(name, value); .)
                        | { 
						"," Designator < out name, out type, out offSet >
						} 
						"=" (. int exprType = noType; .)
						Expression < out value, out exprType >  (. if (exprType != type) Console.WriteLine("error : type mismatch"); .)
                        (. if ((exprType != type) Console.WriteLine("error : type mismatch"); .)						
						{ "," Expression < out value, out exprType >  (. offSet = value; .)
						}
                        | "++" (. table.setValue(name, value + 1); .)
                        | "--" (. table.setValue(name, value - 1); .)
                      ) ";" .

  Designator < out string name, out int type, out int offSet >
                    = Ident (. name = token.val; type = Table.typeOf(name); .)
                    [ "[" 
					Expression < out offSet, out type > (. if (type != intType) Console.WriteLine("error : invalid index type"); .)
					"]" ] .

/* The if-then-elsif-else construction is most easily described as follows. Although
  this is not LL(1), this works admirably - it is simply the well-known dangling
  else ambiguity, which the parser resolves by associating elsif and else clauses
  with the most recent if */

  IfStatement       = "if" "(" Condition ")" Statement
                      { "elsif" "(" Condition ")" Statement }
                      [ "else" Statement ] .

  WhileStatement    = "while" "(" Condition ")" Statement .

/* Remember that the DoWhile statement must end with a semicolon - easy to forget this!
   Why don't we need a semicolon as a terminator for a WhileStatement or IfStatement? */

  DoWhileStatement  = "do"  Statement  "while" "(" Condition ")" ";" .

/* Break and Continue statements are very simple.  They are really "context dependent" but we
   cannot impose such restrictions in a context-free grammar.  And they also need their own
   terminating semicolons, which tend to be forgotten. */

  BreakStatement    = "break"    ";" .
  ContinueStatement = "continue" ";" .

  ReturnStatement   = "return"   ";" .
  HaltStatement     = "halt"     ";" .

/* a C# inspired ForStatement might look like this */

  ForStatement      = 
					"for" "(" (. bool temp = false; .) 
                    [ [ BasicType < out type > (. temp = true; .)
				    ] 
                    Ident
                    (. Table.AddRef(token.val, temp, token.line); .)
					(. int value = 0, type = noType; .)
					(. string name = token.val; .)
                    "=" Expression < out value, out type > ]
                    ";" 
                    [ (. int conValue = 0; .)
					Condition < out conValue >
					] ";"
                    [ Step ]
                    ")" Statement .

  Step              =  
                    Ident (. string name = token.val; .)
                    (. Table.AddRef(token.val, false, token.line); .)
					(. string op = ""; int exprType = noType, exprValue = 0 value = Table.valueOf(name); .)
                    ( "++" (. Table.setValue(name, (value+1)); .)
					| "--" (. Table.setValue(name, (value+1)); .)
					| ( "=" (. op = "="; .)
					| CompoundAssignOp < out op > 
					) Expression < out exprValue, out exprTpye > 
					(. switch(op) { .)
				    (.     case "+=" : .)
					(.         if ( type == exprType ) value += exprValue; .)
                    (.         else Console.WriteLine("Error: type mismatch"); .)				
					(.     case "-=" : .)
					(.         if ( type == exprType ) value -= exprValue; .)
                    (.         else Console.WriteLine("Error: type mismatch"); .)
					(.     case "*=" : .)
					(.         if ( type == exprType ) value *= exprValue; .)
                    (.         else Console.WriteLine("Error: type mismatch"); .)
					(.     case "/=" : .)
					(.         if ( type == exprType ) .)
					(.             if (exprValue == 0) Console.WriteLine("Error: Attempted to divide by zero"); .)
                    (.			   else value /= exprValue; .)
                    (.         else Console.WriteLine("Error: type mismatch"); .)
					(.     case "%=" : .)
					(.         if ( type == exprType ) .)
					(.             if (exprValue == 0) Console.WriteLine("Error: Attempted to divide by zero"); .)
                    (.			   else value /= exprValue; .)
                    (.         else Console.WriteLine("Error: type mismatch"); .)
					(.     case "&=" : .)
					(.         if ( type == exprType ) value &= exprValue; .)
                    (.         else Console.WriteLine("Error: type mismatch"); .)
					(.     case "|=" : .)
					(.         if ( type == exprType ) value |= exprValue; .)
                    (.         else Console.WriteLine("Error: type mismatch"); .)
					(.     case "=" : .)
					(.         if ( type == exprType ) value = exprValue; .)
                    (.         else Console.WriteLine("Error: type mismatch"); .)
					(. } .)
					(. Table.setValue(name, value); .)
					) .

  ReadStatement     = "read" "(" ReadElement { "," ReadElement } ")" ";" .

  ReadElement       = stringLit 
                      | (. string name = ""; int type = noType, offSet = 0; .)
					  Designator < out name, out type, out offSet >
                      (. Table.AddRef(token.val, true, token.line); .) .

  WriteStatement    = "write" "(" WriteElement { "," WriteElement } ")" ";" .

  WriteElement      = stringLit | Expression < out value, out type > .

  Condition < out int value >        = (. int type = noType; .)
                                     Expression < out value, out type > 
									 (. if (type != boolType) Console.WriteLine("error : condition must be of type bool"); .)
									 .

  Expression < out int value, out int type >
                    = 
					(. type = intType; .)
					AddExp < out value, out type >
					[
					(. string op = ""; int addValue = 0, addType; .)
					RelOp < out op > 
					AddExp < out addValue, out addType >
					(. switch(op) { .)
					(. case "==": .)
					(.     if (type == addTpe) value = (vale == addValue) ? 1 : 0; .)
					(.     else Console.WriteLine("Error: type mismatch"); .)
					(.     break; .)
					(. case "!=": .)
					(.     if (type == addTpe) value = (vale != addValue) ? 1 : 0; .)
					(.     else Console.WriteLine("Error: type mismatch"); .)
					(.     break; .)
					(. case "<": .)
					(.     if (type == addTpe) value = (vale < addValue) ? 1 : 0; .)
					(.     else Console.WriteLine("Error: type mismatch"); .)
					(.     break; .)
					(. case "<=": .)
					(.     if (type == addTpe) value = (vale <= addValue) ? 1 : 0; .)
					(.     else Console.WriteLine("Error: type mismatch"); .)
					(.     break; .)
					(. case ">": .)
					(.     if (type == addTpe) value = (vale > addValue) ? 1 : 0; .)
					(.     else Console.WriteLine("Error: type mismatch"); .)
					(.     break; .)
					(. case ">=": .)
					(.     if (type == addTpe) value = (vale >= addValue) ? 1 : 0; .)
					(.     else Console.WriteLine("Error: type mismatch"); .)
					(.     break; .)
					(. } .)
					(. type = boolType; .)
					] .

  AddExp < out int value, out int type >
					= 
					(. bool hasUnaryOp = false; .)
					[     		
					"+" (. hasUnaryOp = true; .)
					| "-" (. hasUnaryOp = true; .)
					] 
					Term < out value, out type >
					(. if (hasUnaryOp) .)
					(.	 if (type != intType) Console.WriteLine("Error: Can only apply this operator to type int"); .)
					{
					(. string op = ""; int termValue = 0, termType = intType; .)
					AddOp < out op > 
					Term < out termValue, out termType >
					(. switch(op) { .)
					(. case "+": .)
					(.     if ( type == termType ) value += termValue; .)
                    (.     else Console.WriteLine("Error: Type mismatch"); .)	
                    (. break; .)
					(. case "-": .)
					(.     if ( type == termType ) value += termValue; .)
                    (.     else Console.WriteLine("Error: Type mismatch"); .)	
                    (. break; .)
					(. case "||": .)
					(.     if ( type == termType ) value += termValue; .)
                    (.     else Console.WriteLine("Error: Type mismatch"); .)	
                    (. break; .)
					(. } .)
					} .

  Term < out int value, out int type >
                    = Factor < out value, out type > 
					{
					(. string op = ""; int mulValue = 0, mulType = intType;
					MulOp < out op >
					Factor < out mulValue, out mulType >
					(. switch(op) {
					(. case "*": .)
					(.     if ( type == mulType ) value *= mulValue; .)
                    (.     else Console.WriteLine("Error: Type mismatch"); .)	
                    (. break; .)
					(. case "/": .)
					(.     if ( type == mulType ) value += mulValue; .)
                    (.     else Console.WriteLine("Error: Type mismatch"); .)	
                    (. break; .)
					(. case "%": .)
					(.     if ( type == mulType ) value += mulValue; .)
                    (.     else Console.WriteLine("Error: Type mismatch"); .)	
                    (. break; .)
					(. case "&&": .)
					(.     type = boolType; .)
					(.     if ( type == mulType ) value = (value != 0 && mulValue ! = 0) ? 1 : 0; .)
                    (.     else Console.WriteLine("Error: Type mismatch"); .)
					(. break; .)
					(. } .)
					} .

  Factor < out int Value, out int Type >  
                    = Designator < out name, out type, out offSet > (. Table.AddRef(token.val, token.line); .)
                    | Constant < out value, out type >
                    | "new" BasicType < out type >       
					"[" (. type++; int eperType = noType; .) 
					Expression < out offSet, out eperType > (. if (eperType != intType) Console.WriteLine("error : array subscript must be of type int"); .)
				    "]"
                    | "!" Factor < out Value, out Type > (. if (type != boolType) Console.WriteLine("error : expression must be of type bool"); .)
					                                     (. else value = (value == 0) ? 1 : 0; .)
					| "(" Expression < out value, out type > 
					")" .

  Type < out int type >
                    = 
					BasicType < out type > [ 
					"[]" (. type++; .)
					] 
					.

  BasicType < out int type >
                    = (. type = noType; .)
					"int" (. type = intType; .)
					| "bool" (. type = boolType; .)
					.

  AddOp < out string op >
                    = 
					"+" (. op = "+"; .)
					| "-" (. op = "-"; .)
					| "||" (. op = "||"; .)
					.

/* The % operator is easily added to the set of MulOps */

  MulOp < out string op >            
                    = 
					"*" (. op = "*"; .)
					| "/" (. op = "/"; .)
					| "&&" (. op = "&&"; .)
					| "%" (. op = "%"; .)
					.

  RelOp < out string op >           
                    = 
					"==" (. op = "=="; .)
					| "!=" (. op = "!="; .)
					| "<" (. op = "<"; .)
					| "<=" (. op = "<="; .)
					| ">" (. op = ">"; .)
					| ">=" (. op = ">="; .)
					.

  Ident             = identifier .

END Parva.
