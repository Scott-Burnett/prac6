using Library;
using System.Collections.Generic;

COMPILER Calc $NC
//  Scott Burnett && Redy van Dyk

class Entry {
    public string _name;
    public int _value;
    public Entry (string name, int value) {
        _name = name;
        _value = value;
    }
}

class Table {
    public static List<Entry> variables = new List<Entry>();
    public static int indexOf(string name) {
        int i = 0;
        foreach (Entry v in variables) {
            if (name == v._name) return i;
            i++;
        }
        return -1;
    }
    public static int valueOf(string name) {
        int pos = indexOf(name);
        if (pos == -1) return 0;
        else return variables[pos]._value;
    }
    public static void set (string name, int value) {
        int pos = indexOf(name);
        if (pos == -1)
            variables.Add(new Entry(name, value));
        else
            variables[pos]._value = value;
    }
}

static int ToInt(bool b) {
// return 0 or 1 according as b is false or true
  return b ? 1 : 0;
} // ToInt

static bool ToBool(int i) {
// return false or true according as i is 0 or 1
  return i == 0 ? false : true;
} // ToBool

static Table table = new Table();

CHARACTERS
  digit      = "0123456789" .
  letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .

TOKENS
  number     = digit { digit } .
  identifier = letter { letter | digit } .

IGNORE CHR(0) .. CHR(31)

PRODUCTIONS
  Calc
  =
  { Print
  | Assignment 
  } "quit"
  .

  Assignment
  =
  (. int value = 0; .)
  (. string name = token.val; .)
  Variable < out value >
  "="
  Expression < out value >
  (. Table.set(name, value); .)
  SYNC ";"
  .

  Print
  =
  "print"
  (. int value = 0; .)
  Expression < out value >
  (. Console.WriteLine(value); .)
  { WEAK ","
    Expression < out value >
    (. Console.WriteLine(value); .)
  }
  SYNC ";"
  .

  Expression < out int value >
  =
  AndExp < out value >
  { (. int andValue; .)
    "||"
    AndExp < out andValue > (. value = ((value != 0) || (andValue != 0)) ? 1 : 0; .)
  } .

  AndExp < out int value>
  =
  EqlExp < out value >
  { (. int eqlValue; .)
    "&&"
    EqlExp < out eqlValue > (. value = ((value != 0) && (eqlValue != 0)) ? 1 : 0; .)
  } .

  EqlExp < out int value >
  =
  RelExp < out value >
  { (. int relValue; .)
    (. string eqlOpKind; .)
    EqlOp < out eqlOpKind >
    (. switch(eqlOpKind) { .)
    (. case "==": .)
        RelExp < out relValue > (. value = (value == relValue) ? 1 : 0; break; .)
    (. case "!=": .)
        RelExp < out relValue > (. value = (value != relValue) ? 1 : 0; break; .)
    (. } .)
  } .

  RelExp <out int value >
  =
  AddExp < out value >
  [ (. int addValue; .)
    (. string relOpKind; .)
    RelOp < out relOpKind >
    (. switch(relOpKind) { .)
    (. case "<": .)
        AddExp < out addValue > (. value = (value < addValue) ? 1 : 0; break; .)
    (. case "<=": .)
        AddExp < out addValue > (. value = (value <= addValue) ? 1 : 0; break; .)
    (. case ">": .)
        AddExp < out addValue > (. value = (value > addValue) ? 1 : 0; break; .)
    (. case ">=": .)
        AddExp < out addValue > (. value = (value >= addValue) ? 1 : 0; break; .)
    (. } .)
  ] .

  AddExp < out int value >
  =
  MultExp < out value >
  { (. int multValue; .)
    (. string addOpKind; .)
    AddOp < out addOpKind >
    (. switch(addOpKind) { .)
    (. case "+": .)
        MultExp < out multValue > (. value += multValue; break;.)
    (. case "-": .)
        MultExp < out multValue > (. value -= multValue; break; .)
    (. } .)
  } .

  MultExp < out int value >
  =
  UnaryExp < out value >
  { (. int unaryValue; .)
    (. string mulOpKind; .)
    MulOp < out mulOpKind >
    (. switch(mulOpKind) { .)
    (. case "*": .)
        UnaryExp < out unaryValue > (. value *= unaryValue; break; .)
    (. case "/": .)
        UnaryExp < out unaryValue > (. value /= unaryValue; break; .)
    (. case "%": .)
        UnaryExp < out unaryValue > (. value %= unaryValue; break; .)
    (. } .)
  } .

  UnaryExp < out int value >
  (. value = 0; .)
  =   Factor < out value >
    | "+" UnaryExp < out value > (. value = + value; .)
    | "-" UnaryExp < out value > (. value = - value; .)
    | "!" UnaryExp < out value > (. value = (value != 0) ? 1 : 0; .)
  .

  Factor < out int value >
  (. value = 0; .)
  =
    Variable < out value >
    | Number < out value > 
    | "true" (. value = 1; .)
    | "false" (. value = 0; .)
    | "(" Expression < out value >
      ")"
  .

  Variable < out int value >
  (. value = Table.valueOf(token.val); .)
  =
  identifier
  .

  Number < out int value >
  (. Int32.TryParse(token.val, out value); .)
  =
  number
  .

  MulOp < out string kind >
  (. kind = ""; .)
  =
      "*" (. kind = "*"; .)
    | "/" (. kind = "/"; .)
    | "%" (. kind = "%"; .)
    .

  AddOp < out string kind >
    (. kind = ""; .)
  =
      "+" (. kind = "+"; .)
    | "-" (. kind = "-"; .)
  .

  RelOp < out string kind >
  (. kind = ""; .)
  =
      "<" (. kind = "<"; .)
    | "<=" (. kind = "<="; .)
    | ">" (. kind = ">"; .)
    | ">=" (. kind = ">="; .)
  .

  EqlOp < out string kind >
  (. kind = ""; .)
  =
      "==" (. kind = "=="; .)
    | "!=" (. kind = "!="; .)
  .

END Calc.
