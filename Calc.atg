using Library;
using System.Collections.Generic;

class Variable {
    public string _name;
    public int _value;
    public Variable (string name, int value) {
        _name = name;
        _value = value;
    }
}

class Table {
    public List<Variable> variables = new List<Variable>;
    public void set (string name, int value) {
        int i = 0, pos = -1;
        foreach (Variable v in variables) {
            if (name == v._name) {
                pos = i;
                break;
            }
            i++;
        }
        
    }
}

COMPILER Calc $NC
//  Scott Burnett && Redy van Dyk

static int ToInt(bool b) {
// return 0 or 1 according as b is false or true
  return b ? 1 : 0;
} // ToInt

static bool ToBool(int i) {
// return false or true according as i is 0 or 1
  return i == 0 ? false : true;
} // ToBool

CHARACTERS
  digit      = "0123456789" .
  letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .

TOKENS
  number     = digit { digit } .
  identifier = letter { letter | digit } .

IGNORE CHR(0) .. CHR(31)

PRODUCTIONS
  Calc
  =
  { Print
  | Assignment 
  } "quit"
  .

  Assignment
  =
  Variable
  "="
  Expression < value >
  SYNC ";"
  .

  Print
  =
  "print"
  Expression < value >
  { WEAK ","
    Expression < Expralue >
  }
  SYNC ";"
  .

<<<<<<< HEAD
  Expression < value >
=======
  Expression < out int value >
>>>>>>> 0e26c8674f6db625ea5e493cd8121f8496024db2
  =
  AndExp < value >
  { "||"
    AndExp
  } .

  AndExp < out int value>
  =
  EqlExp
  { "&&"
    EqlExp
  } .

  EqlExp < out int value >
  =
  RelExp
  { EqlOp
    RelExp
  } .

  RelExp <out int value >
  =
  AddExp
  [ RelOp
    AddExp
  ] .

  AddExp < out int value >
  =
  MultExp
  { AddOp
    MultExp
  } .

  MultExp < out int value >
  =
  UnaryExp < value >
  { MulOp
    UnaryExp
  } .

  UnaryExp < out int value >
  =   Factor < value >
    | "+" UnaryExp
    | "-" UnaryExp
    | "!" UnaryExp
  .

  Factor < out int value >
  =
    Variable (. value = token.val; .)
    | Number (. value = token.val; .) 
    | "true" (. value = 1; .)
    | "false" (. value = 0; .)
    | "(" Expression < value >
      ")"
  .

  Variable < out int value >
  =
  identifier
  .

  Number < out int value >
  =
  number
  .

  MulOp
  =
      "*"
    | "/"
    | "%"
    .

  AddOp
  =
      "+"
    | "-"
  .

  RelOp
  =
      "<"
    | "<="
    | ">"
    | ">="
  .

  EqlOp
  =
      "=="
    | "!="
  .

END Calc.
